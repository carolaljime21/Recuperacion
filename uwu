import play.api.libs.json._
import scala.util.{Failure, Success, Try}
import com.github.tototoshi.csv._
import java.io.File
import requests.Response
import scalikejdbc._
import generarSQL.escapeMysql
import java.nio.charset.StandardCharsets
import java.nio.file.{Files, Paths, StandardOpenOption}
import scala.util.matching.Regex

object question1 extends App{

    val reader = CSVReader.open(new File("src/movie_dataset.csv"))
    val data = reader.allWithHeaders()
    reader.close()

  def replacePattern(original: String): String = {
    var txtOr = original
    val pattern: Regex = "(\\s\"(.*?)\",)".r
    for (m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("'", "-u0027")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }

  def replacePattern2(original: String): String = {
    var txtOr = original
    val pattern: Regex = "([a-z]\\s\"(.*?)\"\\s*[A-Z])".r
    for (m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("\"", "-u0022")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }

  def replacePattern3(original: String): String = {
    var txtOr = original
    val pattern: Regex = "(:\\s'\"(.*?)',)".r
    for (m <- pattern.findAllIn(original)) {
      val textOriginal = m
      val replacementText = m.replace("\"", "-u0022")
      txtOr = txtOr.replace(textOriginal, replacementText)
    }
    txtOr
  }

  val list = data
    .map(row => (row("original_language"), row("production_companies")))
  val groupedCrew = list.groupBy(_._1)
  val crewWithMovieId = groupedCrew.map { case (lan, crewList) =>
    val crew = crewList.map(_._2)
      .map(replacePattern2)
      .map(replacePattern)
      .map(replacePattern3)
      .map(text => text.replace("'", "\""))
      .map(text => text.replace("-u0027", "'"))
      .map(text => text.replace("-u0022", "\\\""))
      .map(text => Try(Json.parse(text)))
      .filter(_.isSuccess)
      .map(_.get)
      .flatMap(_.as[JsArray].value)
      .map(_.as[JsObject])
      .map(jsObj => (lan, jsObj("id").as[Int],
        escapeMysql(jsObj("name").as[String])))
    crew
  }.toList.distinct

}
