import play.api.libs.json._
import scala.util.{Failure, Success, Try}
import com.github.tototoshi.csv._
import java.io.File
import requests.Response
import scalikejdbc._
import generarSQL.escapeMysql
import java.nio.charset.StandardCharsets
import java.nio.file.{Files, Paths, StandardOpenOption}
import replacefuncion._

object tabLanguage extends App {

  val reader = CSVReader.open(new File("src/movie_dataset.csv"))
  val data = reader.allWithHeaders()
  reader.close()

  val isoData = data.flatMap(row => row.get("spoken_languages"))
    .map(text => Json.parse(text))
    .flatMap(iso => iso \\ "iso_639_1")
    .map(iso => iso.as[String])

  val nameData = data.flatMap(row => row.get("spoken_languages"))
    .map(text => Json.parse(text))
    .flatMap(name => name \\ "name")
    .map(name => name.as[String])
    .map {
      case name if name.isEmpty => "noData"
      case name => name
    }

  val isoAndName = isoData.zip(nameData)
  val newIsoAndName = isoAndName.distinct

  //LLENAR CON SENTENCIAS SQL
  Class.forName("com.mysql.cj.jdbc.Driver")
  ConnectionPool.singleton("jdbc:mysql://localhost:3306/practica", "root", "Carol210504")
  implicit val session = AutoSession

  newIsoAndName.map(x =>
    sql"""
         |INSERT INTO language(iso, name)
            VALUES (${x._1}, ${x._2})
         |""".stripMargin.update.apply()
  )

  val SQL_INSERT_PATTERN =
    """INSERT INTO LANGUAGE (`iso`,`name`)
      |VALUES
      |'%s', '%s');
      |"""
      .stripMargin

  val scriptData = newIsoAndName
    .map(movie => SQL_INSERT_PATTERN.formatLocal(java.util.Locale.US,
      escapeMysql(movie._1),
      escapeMysql(movie._2),
    ))

  val scriptFile = new File("src/scripts/language.sql")
  if (scriptFile.exists()) scriptFile.delete()
  scriptData.foreach(insert =>
    Files.write(Paths.get("src/scripts/language.sql")
      , insert.getBytes(StandardCharsets.UTF_8)
      , StandardOpenOption.CREATE, StandardOpenOption.APPEND)
  )

}
