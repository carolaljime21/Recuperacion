import play.api.libs.json.{Json, _}
import scala.util.{Failure, Success, Try}
import com.github.tototoshi.csv._
import java.io.File
import requests.Response
import scalikejdbc._
import generarSQL.escapeMysql
import java.nio.charset.StandardCharsets
import java.nio.file.{Files, Paths, StandardOpenOption}
import actorsName._

object tabPerson extends App{

  val reader = CSVReader.open(new File("src/movie_dataset.csv"))
  val data = reader.allWithHeaders()
  reader.close()

  val actors = data
    .map(row => (row("cast")))
    .filter(_.nonEmpty)
    .take(100)
    .map(tuple2 => (StringContext.processEscapes(tuple2)))
    .map { t2 => (actorsNames(t2)) }
    .map { t2 => (Try(Json.parse(t2.get))) }
    .filter(_.isSuccess)
    .map(t2 => (t2.get))
    .map(t2 => (transform(t2)))
    .flatMap(t2 => t2.map(name => (name)))
    .distinct
    .take(100)

  val directors = data
    .map(row => row("director"))
    .filter(_.nonEmpty)
    .distinct
    .take(100)

  val personName = actors ++ directors

  //LLENAR CON SENTENCIAS SQL
  Class.forName("com.mysql.cj.jdbc.Driver")
  ConnectionPool.singleton("jdbc:mysql://localhost:3306/practica", "root", "Carol210504")
  implicit val session = AutoSession

  personName.map(x =>
    sql"""
         |INSERT INTO person(name)
            VALUES (${x})
         |""".stripMargin.update.apply()
  )

  val SQL_INSERT_PATTERN =
    """INSERT INTO PERSON (`name`)
      |VALUES
      |'%s');
      |"""
      .stripMargin

  val scriptData = personName
    .map(movie => SQL_INSERT_PATTERN.formatLocal(java.util.Locale.US,
      escapeMysql(movie)
    ))

  val scriptFile = new File("src/scripts/person.sql")
  if (scriptFile.exists()) scriptFile.delete()
  scriptData.foreach(insert =>
    Files.write(Paths.get("src/scripts/person.sql")
      , insert.getBytes(StandardCharsets.UTF_8)
      , StandardOpenOption.CREATE, StandardOpenOption.APPEND))

}
