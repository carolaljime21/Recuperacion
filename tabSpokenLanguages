import play.api.libs.json.{Json, _}
import scala.util.{Failure, Success, Try}
import com.github.tototoshi.csv._
import java.io.File
import requests.Response
import scalikejdbc._
import generarSQL.escapeMysql
import java.nio.charset.StandardCharsets
import java.nio.file.{Files, Paths, StandardOpenOption}

object tabSpokenLanguage extends App {

  Class.forName("com.mysql.cj.jdbc.Driver")
  ConnectionPool.singleton("jdbc:mysql://localhost:3306/practica", "root", "Carol210504")
  implicit val session = AutoSession

  val movOrTit = sql"""SELECT original_title FROM movie""".map(rs => rs.string("original_title")).list.apply()
  val lanIso = sql"""SELECT iso FROM language""".map(rs => rs.string("iso")).list.apply()

  val spokLanData = movOrTit.zip(lanIso)

  spokLanData.foreach {
    spokenL =>
      sql"""INSERT INTO spoken_language (mov_id, lan_id)
      VALUES
      ((SELECT id FROM movie WHERE original_title = ${spokenL._1}),
      (SELECT id FROM language WHERE iso = ${spokenL._2}))
      """.stripMargin.update.apply()

  }

  //LENADO POR SCRIPT

  val movId = sql"""SELECT id FROM movie""".map(rs => rs.int("id")).list.apply()
  val lanId = sql"""SELECT id FROM language""".map(rs => rs.int("id")).list.apply()

  val idsData = movId.zip(lanId)

  val SQL_INSERT_PATTERN =
    """INSERT INTO SPOKEN_LANGUAGE (`mov_id`,`lan_id`)
      |VALUES
      |'%d', '%d');
      |"""
      .stripMargin

  val scriptData = idsData
    .map(movie => SQL_INSERT_PATTERN.formatLocal(java.util.Locale.US,
      movie._1,
      movie._2
    ))

  val scriptFile = new File("src/scripts/language.sql")
  if (scriptFile.exists()) scriptFile.delete()
  scriptData.foreach(insert =>
    Files.write(Paths.get("src/scripts/language.sql")
      , insert.getBytes(StandardCharsets.UTF_8)
      , StandardOpenOption.CREATE, StandardOpenOption.APPEND)
  )

}
